type User {
    id: ID!

    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    fullName: String @rename(attribute: "full_name")
    initials: String
    street: String
    postcode: String
    city: String
    country: String
    email: String!
    loginAt: DateTime @rename(attribute: "login_at")
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime!  @rename(attribute: "updated_at")
    deletedAt: DateTime  @rename(attribute: "deleted_at")

    permissions: [Permission!]!  @method(name: "getAllPermissions")
    directPermissions: [Permission!]!  @method(name: "getDirectPermissions")
    inheritedPermissions: [Permission!]! @method(name: "getPermissionsViaRoles")
    groups: [Group!] @morphMany(relation: "roles")
}

input UpdateOrCreateUserInput {
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    street: String
    postcode: String
    city: String
    country: String
    email: String
}

input UpdateUserPasswordInput {
    currentPassword: String @rename(attribute: "current_password")
    password: String
    passwordConfirmation: String @rename(attribute: "password_confirmation")
}

enum UserColumn {
    firstName @enum(value: "first_name")
    lastName @enum(value: "last_name")
    initials @enum(value: initials)
    street @enum(value: street)
    postcode @enum(value: postcode)
    city @enum(value: city)
    country @enum(value: country)
    email @enum(value: email)
    loginAt @enum(value: "login_at")
    createdAt @enum(value: "created_at")
    updatedAt @enum(value: "updated_at")
    deletedAt @enum(value: "deleted_at")
}

extend type Query @middleware(checks: ["auth:airlock"]) {
    me: User @auth @event(dispatch: "App\\Events\\UserLogin")
    user(id: ID! @eq): User @find
    users(search: String @search, orderBy: _ @orderBy(columnsEnum: "UserColumn")): [User!]! @paginate @softDeletes
}

extend type Mutation @middleware(checks: ["auth:airlock"]) {
    updateMe(data: UpdateOrCreateUserInput! @spread): User @updateUserValidation
    updateMyPassword(data: UpdateUserPasswordInput! @spread): User @updateUserPasswordValidation

    createUser(data: UpdateOrCreateUserInput! @spread): User @updateUserValidation @create @event(dispatch: "App\\Events\\UserCreated")
    updateUser(id: ID!, data: UpdateOrCreateUserInput! @spread): User @updateUserValidation @update
    deleteUser(id: ID!): User @delete
    restoreUser(id: ID!): User @restore
}
