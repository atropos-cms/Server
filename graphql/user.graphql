type User {
    id: ID!
    first_name: String!
    last_name: String!
    street: String
    postcode: String
    city: String
    country: String
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

input UpdateUserInput {
    first_name: String @rules(apply: ["string"])
    last_name: String @rules(apply: ["string"])
    street: String
    postcode: String
    city: String
    country: String
    email: String @rules(apply: ["email", "unique:users,email"])
    password: String @bcrypt
}

input CreateUserInput {
    first_name: String @rules(apply: ["string"])
    last_name: String @rules(apply: ["string"])
    street: String
    postcode: String
    city: String
    country: String
    email: String @rules(apply: ["required", "email", "unique:users,email"])
    password: String @bcrypt
}


extend type Query @middleware(checks: ["auth:api"]) {
    me: User @auth
    user(id: ID! @eq): User @find(model: "App\\Models\\User")
    users: [User!]! @paginate(model: "App\\Models\\User") @softDeletes
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateMe(data: UpdateUserInput! @spread): User

    createUser(data: CreateUserInput! @spread): User @create
    updateUser(id: ID!, data: UpdateUserInput! @spread): User @update
    deleteUser(id: ID!): User @delete
    restoreUser(id: ID!): User @restore
}
