type Page {
    id: ID!
    title: String!
    slug: String!
    content: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
    author: User! @belongsTo
}

input CreatePageInput {
    title: String @rules(apply: ["string"])
    slug: String @rules(apply: ["string"])
    content: String @rules(apply: ["string"])
    author: CreateAuthorRelation
}

input CreateAuthorRelation {
    connect: ID
}

input UpdatePageInput {
    title: String @rules(apply: ["string"])
    slug: String @rules(apply: ["string"])
    content: String @rules(apply: ["string"])
}

extend type Query @middleware(checks: ["auth:api"]) {
    page(id: ID! @eq): Page @find
    pages: [Page!]! @all @softDeletes
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createPage(data: CreatePageInput! @spread): Page @create
    updatePage(id: ID!, data: UpdatePageInput! @spread): Page @update
    deletePage(id: ID!): Page @delete
    restorePage(id: ID!): Page @restore
}
