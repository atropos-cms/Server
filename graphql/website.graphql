type Page @modelClass(class: "\\App\\Models\\Website\\Page") {
    id: ID!
    body: String
    navigationentry: Navigationentry! @morphOne
}

input UpdatePageInput {
    body: String! @rules(apply: ["string"])
}

union Content = Page

type Navigationentry @modelClass(class: "\\App\\Models\\Website\\Navigationentry") {
    id: ID!
    title: String!
    slug: String!
    order: Int!
    published: Boolean!
    content: Content! @morphTo
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime!  @rename(attribute: "updated_at")
    deletedAt: DateTime  @rename(attribute: "deleted_at")
    author: User! @belongsTo
}

input CreateNavigationentryInput {
    title: String! @rules(apply: ["string"])
    type: ContentType!
    slug: String @rules(apply: ["string"])
    order: Int @rules(apply: ["integer"])
    published: Boolean @rules(apply: ["boolean"])
    author: CreateAuthorRelation
}

input UpdateNavigationentryInput {
    title: String @rules(apply: ["string"])
    slug: String @rules(apply: ["string"])
    published: Boolean @rules(apply: ["boolean"])
}

extend type Query @middleware(checks: ["auth:sanctum"]) {
    navigationentry(id: ID! @eq): Navigationentry @find
    navigationentries: [Navigationentry!]! @all @softDeletes
}

extend type Mutation @middleware(checks: ["auth:sanctum"]) {
    createNavigationentry(data: CreateNavigationentryInput! @spread): Navigationentry
    updateNavigationentry(id: ID!, data: UpdateNavigationentryInput! @spread): Navigationentry @update
    deleteNavigationentry(id: ID!): Navigationentry @delete
    forceDeleteNavigationentry(id: ID!): Navigationentry @forceDelete
    restoreNavigationentry(id: ID!): Navigationentry @restore

    syncNavigationentryOrder(data: [ID!]!): [Navigationentry]

    updatePage(id: ID!, data: UpdatePageInput! @spread): Page @update
}
