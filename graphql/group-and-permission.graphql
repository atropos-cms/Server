type Permission {
    id: ID!
    name: String!
    groups: [Group!]!
}

type Group {
    id: ID!
    name: String!
    description: String
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime!  @rename(attribute: "updated_at")

    permissions: [Permission!]!
    members: [User!]!  @morphMany(relation: "users")
}

input UpdateOrCreateGroupInput {
    name: String @rules(apply: ["required", "string"])
    description: String @rules(apply: ["string", "max:1000"])
}

enum GroupColumn {
    name @enum(value: "name")
    description @enum(value: "description")
    createdAt @enum(value: "created_at")
    updatedAt @enum(value: "updated_at")
}

extend type Query @middleware(checks: ["auth:airlock"]) {
    group(id: ID! @eq): Group @find
    groups(search: String @search, orderBy: _ @orderBy(columnsEnum: "GroupColumn")): [Group!]! @paginate

    permission(id: ID! @eq): Permission @find(model: "Spatie\\Permission\\Models\\Permission")
    permissions: [Permission!]! @paginate(model: "Spatie\\Permission\\Models\\Permission")
}

extend type Mutation @middleware(checks: ["auth:airlock"]) {
    createGroup(data: UpdateOrCreateGroupInput! @spread): Group @create
    updateGroup(id: ID!, data: UpdateOrCreateGroupInput! @spread): Group @update
    deleteGroup(id: ID!): Group @delete

    syncGroupPermissions(id: ID!, permissions: [ID!]!): Group
    syncGroupMembers(id: ID!, members: [ID!]!): Group
    addGroupMembers(id: ID!, members: [ID!]!): Group
    removeGroupMembers(id: ID!, members: [ID!]!): Group
    syncUserPermissions(id: ID!, permissions: [ID!]!): User
    syncUserGroups(id: ID!, groups: [ID!]!): User
}
