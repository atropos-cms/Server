type Permission {
    id: ID!
    name: String!
    roles: [Role!]!
}

type Role {
    id: ID!
    name: String!
    permissions: [Permission!]!
    members: [User!]!  @morphMany(relation: "users")
}

input CreateOrUpdateRoleInput {
    name: String @rules(apply: ["string"])
}

extend type Query @middleware(checks: ["auth:api"]) {
    role(id: ID! @eq): Role @find(model: "Spatie\\Permission\\Models\\Role")
    roles: [Role!]! @paginate(model: "Spatie\\Permission\\Models\\Role")

    permission(id: ID! @eq): Permission @find(model: "Spatie\\Permission\\Models\\Permission")
    permissions: [Permission!]! @paginate(model: "Spatie\\Permission\\Models\\Permission")
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createRole(data: CreateOrUpdateRoleInput! @spread): Role @create(model: "Spatie\\Permission\\Models\\Role")
    updateRole(id: ID!, data: CreateOrUpdateRoleInput! @spread): Role @update(model: "Spatie\\Permission\\Models\\Role")
    deleteRole(id: ID!): Role @delete(model: "Spatie\\Permission\\Models\\Role")

    syncRolePermissions(id: ID!, permissions: [ID!]!): Role
    syncUSerPermissions(id: ID!, permissions: [ID!]!): User
    syncUserRoles(id: ID!, roles: [ID!]!): User
}
