type Permission {
    id: ID!
    name: String!
    category: String
    roles: [Role!]!
}

type Role {
    id: ID!
    name: String!
    description: String
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime!  @rename(attribute: "updated_at")

    permissions: [Permission!]!
    members: [User!]!  @morphMany(relation: "users")
    membersCount: Int! @rename(attribute: "members_count")
}

input UpdateOrCreateRoleInput {
    name: String @rules(apply: ["required", "string"])
    description: String @rules(apply: ["string", "nullable", "max:1000"])
}

enum RoleColumn {
    name @enum(value: "name")
    description @enum(value: "description")
    createdAt @enum(value: "created_at")
    updatedAt @enum(value: "updated_at")
}

extend type Query @middleware(checks: ["auth:sanctum"]) {
    role(id: ID! @eq): Role @find
    roles(search: String @search, orderBy: _ @orderBy(columnsEnum: "RoleColumn")): [Role!]! @paginate

    permission(id: ID! @eq): Permission @find
    permissions: [Permission!]! @all
}

extend type Mutation @middleware(checks: ["auth:sanctum"]) {
    createRole(data: UpdateOrCreateRoleInput! @spread): Role @create
    updateRole(id: ID!, data: UpdateOrCreateRoleInput! @spread): Role @update
    deleteRole(id: ID!): Role @delete

    syncRolePermissions(id: ID!, permissions: [ID!]!): Role
    syncRoleMembers(id: ID!, members: [ID!]!): Role
    addRoleMembers(id: ID!, members: [ID!]!): Role
    removeRoleMembers(id: ID!, members: [ID!]!): Role
    syncUserPermissions(id: ID!, permissions: [ID!]!): User
    syncUserRoles(id: ID!, roles: [ID!]!): User
}
