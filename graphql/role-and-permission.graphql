type Permission {
    id: ID!
    name: String!
    category: String
    roles: [Role!]!
}

type Role {
    id: ID!
    name: String!
    description: String
    emailAddress: String @rename(attribute: "email_address")
    mailingList: RoleMailingList @rename(attribute: "mailing_list")
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime!  @rename(attribute: "updated_at")

    permissions: [Permission!]!
    members: [User!]!  @morphMany(relation: "users")
    membersCount: Int! @rename(attribute: "members_count")
}

input UpdateOrCreateRoleInput {
    name: String @rules(apply: ["required", "string"])
    description: String @rules(apply: ["string", "nullable", "max:1000"])
    emailAddress: String @rules(apply: ["string", "nullable", "email:rfc,strict,dns", "max:100"]) @rename(attribute: "email_address")
    mailingList: RoleMailingList @rename(attribute: "mailing_list")
}

enum RoleColumn {
    name @enum(value: "name")
    description @enum(value: "description")
    createdAt @enum(value: "created_at")
    updatedAt @enum(value: "updated_at")
}

extend type Query @middleware(checks: ["auth:sanctum"]) {
    role(id: ID! @eq): Role @find @can(ability: "view", find: "id")
    roles(search: String @search, orderBy: _ @orderBy(columnsEnum: "RoleColumn")): [Role!]! @paginate @can(ability: "viewAny")

    permission(id: ID! @eq): Permission @find
    permissions: [Permission!]! @all
}

extend type Mutation @middleware(checks: ["auth:sanctum"]) {
    createRole(data: UpdateOrCreateRoleInput! @spread): Role @create @can(ability: "create")
    updateRole(id: ID!, data: UpdateOrCreateRoleInput! @spread): Role @update @can(ability: "update", find: "id")
    deleteRole(id: ID!): Role @delete @can(ability: "delete", find: "id")

    syncRolePermissions(id: ID!, permissions: [ID!]!): Role @can(ability: "update", find: "id")
    syncRoleMembers(id: ID!, members: [ID!]!): Role @can(ability: "update", find: "id")
    addRoleMembers(id: ID!, members: [ID!]!): Role @can(ability: "update", find: "id")
    removeRoleMembers(id: ID!, members: [ID!]!): Role @can(ability: "update", find: "id")
    syncUserPermissions(id: ID!, permissions: [ID!]!): User @can(ability: "update", find: "id")
    syncUserRoles(id: ID!, roles: [ID!]!): User @can(ability: "update", find: "id")
}
